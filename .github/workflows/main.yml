name: Java CI with Maven

on:
  push:
    branches: [ "main" ] # 当向master分支进行git push时触发该工作流
  pull_request:
    branches: [ "main" ] # 当向master分支合并分支时触发该工作流

# 工作流具体执行的任务
jobs:
  build:

    runs-on: ubuntu-latest # 运行在虚拟机上，指定虚拟机及其版本
    env:
      # 端口号
      Port: 8081      
      # 云服务地址
      Host_IP: ${{secrets.REMOTE_SERVER01_IP}}
      # 云服务密码
      Host_PWD: ${{secrets.REMOTE_SERVER01_PWD}}
      # 账号
      Host_Role: root
     
    steps:
      - name: Print Environment
        run: | 
          echo $Port
          echo "端口号:$Port"
          echo $GITHUB_REPOSITORY
          echo ${GITHUB_REF##*/}
          echo ${Host_IP}
          echo ${Host_PWD}

          PROJECT_NAME=$(basename $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"
          echo "项目名称: $PROJECT_NAME"
          # echo "PROJECT_NAME=$(basename $GITHUB_REPOSITORY)" >> "$GITHUB_ENV"
          # echo "项目名称: $PROJECT_NAME"
          # echo "项目名称: ${PROJECT_NAME}"
          
          # echo "FILE_NAME=${PROJECT_NAME}-backend" >> "$GITHUB_ENV"
          # echo "VERSION=0.1" >> "$GITHUB_ENV"
          
          # echo "项目名称: $PROJECT_NAME"
          # echo "文件名称: $FILE_NAME"
          # echo "版本号: $VERSION"

          
          # echo "项目名称2: $PROJECT_NAME"
          # echo "文件名称2: $FILE_NAME"
          # echo "版本号2: ${VERSION}"
          pwd
          ls
      - name: Use the project name from environment variable222
        run: |
          echo "Using the project name from the environment variable."
          echo "项目名称 (从环境变量): $PROJECT_NAME"
      
          
      - name: pull latest code
        uses: actions/checkout@v3 # 使用官方的checkout action，用于将仓库中的最新代码检查并拉取到工作目录中

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3 # 安装java环境的action
        with:
          java-version: '8.0' # 指定jkd版本
          distribution: 'temurin'
          cache: maven # 使用maven缓存，避免每次构建项目时都要重新下载maven依赖

      - name: Build docker image
        run: | 									   # run：该步骤要执行的命令，| 代表可以有多条命令
          
          docker build -t ${FILE_NAME}:${VERSION} .    # 构建docker镜像，命令最后的点代表Dockerfile所在目录
          docker save -o  ${FILE_NAME}.tar  ${FILE_NAME}:${VERSION} # 保存压缩后的docker镜像，这一步是为了方便后面我们将该镜像上传至指定的服务器
          
      - name: Test
        run: | 									   # run：该步骤要执行的命令，| 代表可以有多条命令    
          pwd
          ls
          
      - name: Print file size
        run: |
          FILE_PATH="./${FILE_NAME}.tar"  # 替换为你的生成文件路径
          FILE_SIZE_MB=$(echo "scale=2; $(stat -c%s "$FILE_PATH") / (1024 * 1024)" | bc) # 生成文件大小
          echo "Generated file size: $FILE_SIZE_MB MB"
           
      - name: Run sshpass commands4
        uses: matheusvanzan/sshpass-action@v2
        with:
          host: ${{env.Host_IP}}
          user: ${{env.Host_Role}}
          pass: ${{env.Host_PWD}}
          run: |
            cd ${{secrets.REMOTE_PROJECT_CATALOGUE}} 
            rm -f pom.xml
