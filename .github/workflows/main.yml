name: Java CI with Maven

on:
  push:
    branches: [ "main" ] # 当向master分支进行git push时触发该工作流
  pull_request:
    branches: [ "main" ] # 当向master分支合并分支时触发该工作流

# 工作流具体执行的任务
jobs:
  build:

    runs-on: ubuntu-latest # 运行在虚拟机上，指定虚拟机及其版本
    env:
      # 端口号
      Port: 8081      
      # 云服务地址
      Host_IP: ${{secrets.REMOTE_SERVER01_IP}}
      # 云服务密码
      Host_PWD: ${{secrets.REMOTE_SERVER01_PWD}}
      # 账号
      Host_Role: root
     
    steps:
      - name: Print Environment
        run: | 
          echo $Port
          echo "端口号:$Port"
          echo $GITHUB_REPOSITORY
          echo ${GITHUB_REF##*/}
          echo ${Host_IP}
          echo ${Host_PWD}
          echo pwd
          
      - name: pull latest code
        uses: actions/checkout@v3 # 使用官方的checkout action，用于将仓库中的最新代码检查并拉取到工作目录中

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3 # 安装java环境的action
        with:
          java-version: '8.0' # 指定jkd版本
          distribution: 'temurin'
          cache: maven # 使用maven缓存，避免每次构建项目时都要重新下载maven依赖

      - name: Build docker image
        run: | 									   # run：该步骤要执行的命令，| 代表可以有多条命令
          docker build -t dingsai-backend:0.1 .    # 构建docker镜像，命令最后的点代表Dockerfile所在目录
          docker save -o dingsai-backend.tar dingsai-backend:0.1 # 保存压缩后的docker镜像，这一步是为了方便后面我们将该镜像上传至指定的服务器
          
      - name: Build docker image
        run: | 									   # run：该步骤要执行的命令，| 代表可以有多条命令    
           echo pwd

           
      - name: Run sshpass commands4
        uses: matheusvanzan/sshpass-action@v2
        with:
          host: ${{env.Host_IP}}
          user: ${{env.Host_Role}}
          pass: ${{env.Host_PWD}}
          run: |
            cd ${{secrets.REMOTE_PROJECT_CATALOGUE}} 
            rm -f pom.xml
