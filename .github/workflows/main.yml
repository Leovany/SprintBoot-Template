name: Java CI with Maven

on:
  push:
    branches: [ "main" ] # 当向master分支进行git push时触发该工作流
  pull_request:
    branches: [ "main" ] # 当向master分支合并分支时触发该工作流

# 工作流具体执行的任务
jobs:
  build:

    runs-on: ubuntu-latest # 运行在虚拟机上，指定虚拟机及其版本
    env:
      port: 8081
      port_name: 8082
      project_name: ${{GITHUB_REPOSITORY}}
      branch_name: ${GITHUB_REF##*/}
    # 工作流步骤
    # 写在steps中
    # 每个 - 即代表一个任务
    # name：任务名字
    # uses：使用github提供的某个action，每个action都有不同的用途
    steps:
      - name: Print Environment
        run: | 
          echo $GITHUB_REPOSITORY
          echo ${GITHUB_REF##*/}
          echo "项目名称：${project_name}"
          echo ${branch_name}
          echo $port
          echo $port_name
#      - name: pull latest code
#        uses: actions/checkout@v3 # 使用官方的checkout action，用于将仓库中的最新代码检查并拉取到工作目录中
#
#      - name: Set up JDK 1.8
#        uses: actions/setup-java@v3 # 安装java环境的action
#        with:
#          java-version: '8.0' # 指定jkd版本
#          distribution: 'temurin'
#          cache: maven # 使用maven缓存，避免每次构建项目时都要重新下载maven依赖
#
#      - name: Build docker image
#        run: | 									   # run：该步骤要执行的命令，| 代表可以有多条命令
#          docker build -t dingsai-backend:0.1 .    # 构建docker镜像，命令最后的点代表Dockerfile所在目录
#          docker save -o dingsai-backend.tar dingsai-backend:0.1 # 保存压缩后的docker镜像，这一步是为了方便后面我们将该镜像上传至指定的服务器
#
#      - name: Print file size
#        run: |
#          FILE_PATH="./dingsai-backend.tar"  # 替换为你的生成文件路径
#          FILE_SIZE_MB=$(echo "scale=2; $(stat -c%s "$FILE_PATH") / (1024 * 1024)" | bc) # 生成文件大小
#          echo "Generated file size: $FILE_SIZE_MB MB"
         
          

      # 删除旧的docker镜像
      # 使用sshpass以非交互式的用户名密码方式登录远程服务器
      # 停止运行中的docker容器、删除该容器、删除镜像
      # docker命令后面的两条竖线 || 代表当前面的docker命令执行失败时，命令可以继续往下执行，这样做的原因是在第一次构建项目的时候肯定不会存在这些容器和镜像，此时删除或停止这些容器就会失败
#      - name: delete old docker image
#        run: sshpass -p ${{secrets.REMOTE_SERVER01_PWD}} ssh -o StrictHostKeyChecking=no root@${{secrets.REMOTE_SERVER01_IP}} "docker stop dingsai-backend || true && docker rm dingsai-backend || true && docker rmi dingsai-backend:0.1 || true"
#
#      # 删除旧的docker镜像压缩包
#      - name: delete old docker tar
#        run: sshpass -p ${{secrets.REMOTE_SERVER01_PWD}} ssh -o StrictHostKeyChecking=no root@${{secrets.REMOTE_SERVER01_IP}} "cd ${{secrets.REMOTE_PROJECT_CATALOGUE}} && rm -f dingsai-backend.tar"
#      # 上传新的docker镜像
#      - name: upload new docker image and start-up script
#        run: sshpass -p ${{secrets.REMOTE_SERVER01_PWD}} scp -r -o StrictHostKeyChecking=no ./dingsai-backend.tar root@${{secrets.REMOTE_SERVER01_IP}}:${{secrets.REMOTE_PROJECT_CATALOGUE}}
#      # 加载tar文件，加载docker镜像
#      - name: load new docker image
#        run: sshpass -p ${{secrets.REMOTE_SERVER01_PWD}} ssh -o StrictHostKeyChecking=no root@${{secrets.REMOTE_SERVER01_IP}} "docker load -i ${{secrets.REMOTE_PROJECT_CATALOGUE}}/dingsai-backend.tar"
#      # docker run 运行，启动容器
#      - name: run project
#        run: sshpass -p ${{secrets.REMOTE_SERVER01_PWD}} ssh -o StrictHostKeyChecking=no root@${{secrets.REMOTE_SERVER01_IP}} "docker run -d -p 8081:8080 --name dingsai-backend dingsai-backend:0.1"
